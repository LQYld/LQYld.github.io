(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{412:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),a("p",[t._v("大多数时候，我们在不了解有关内存管理的知识下也只开发，因为 JS 引擎会为我们处理这个问题。不过，有时候我们会遇到内存泄漏之类的问题，这个只有知道内存分配是怎样工作的，我们才能解决这些问题。\n"),a("br"),t._v("在本文中，主要介绍内存分配和垃圾回收的工作原理以及如何避免一些常见的内存泄漏问题。")]),t._v(" "),a("h2",{attrs:{id:"常见的内存泄露"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的内存泄露"}},[t._v("#")]),t._v(" 常见的内存泄露")]),t._v(" "),a("ul",[a("li",[t._v("全局变量")]),t._v(" "),a("li",[t._v("定时器未清除")]),t._v(" "),a("li",[t._v("闭包")]),t._v(" "),a("li",[t._v("Dom 引用")]),t._v(" "),a("li",[t._v("多处引用")]),t._v(" "),a("li",[t._v("等等。。。")])]),t._v(" "),a("h2",{attrs:{id:"缓存-memory-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存-memory-生命周期"}},[t._v("#")]),t._v(" 缓存( Memory)生命周期")]),t._v(" "),a("p",[t._v("在 JS 中， 当我们创建变量、函数或任何对象时， JS 引擎会为此分配内存，并在不需要的时候释放它。"),a("br"),a("br"),t._v(" "),a("strong",[t._v("分配内存")]),t._v("是在内存中保留空间的过程，而"),a("strong",[t._v("释放内存")]),t._v("则释放空间，准备用于其他目的。"),a("br"),t._v("\n每次我们分配一个变量或创建一个函数时，该变量的存储会经历以下相同的阶段："),a("br"),a("br"),t._v(" "),a("strong",[t._v("分配内存")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("JS 会为我们处理这个问题:它分配我们创建对象所需的内存。"),a("br")])]),t._v(" "),a("p",[a("strong",[t._v("使用内存")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("使用内存是我们在代码中显式地做的事情：对内存的读写其实就是对变量的读写。"),a("br")])]),t._v(" "),a("p",[a("strong",[t._v("释放内存")]),a("br")]),t._v(" "),a("ul",[a("li",[t._v("此步骤也是由 JS 引擎处理，释放分配的内存后，就可以将其用于新用途。"),a("br")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("扩展")]),t._v(" "),a("p",[t._v("内存管理上下文中的“对象”不仅包括 JS 对象，还包括函数和函数作用域")])]),t._v(" "),a("h2",{attrs:{id:"内存堆和堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存堆和堆栈"}},[t._v("#")]),t._v(" 内存堆和堆栈")]),t._v(" "),a("p",[t._v("现在我们知道，对于我们在 JS 中定义的所有内容，引擎都会分配内存并在不需要内存时将其释放。"),a("br"),a("br")]),t._v(" "),a("p",[a("strong",[t._v("这些东西将被储存在哪里？")])]),t._v(" "),a("p",[t._v("JS 引擎在两个地方可以存储数据，"),a("strong",[t._v("内存堆")]),t._v("和"),a("strong",[t._v("堆栈")]),t._v("。堆和堆栈是引引擎是用于不同目的的两个数据结构。")]),t._v(" "),a("p",[t._v("堆栈是 JS 用于存储静态数据的数据结构。静态数据是引擎在编译时能知道大小的数据。在 JS 中，包括指向对象和函数的原始值（strings,number,boolean,undefined和null）和引用类型。"),a("br"),a("br"),t._v("\n由于引擎知道大小不会改变，因此它将为每个值分配固定数量的内存。"),a("br"),a("br"),t._v("\n在执行之前立即分配内存的过程称为"),a("strong",[t._v("静态内存分配")]),t._v("。这些值和整个堆栈的限制取决于浏览器。")]),t._v(" "),a("h2",{attrs:{id:"堆-动态内存分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆-动态内存分配"}},[t._v("#")]),t._v(" 堆:动态内存分配")]),t._v(" "),a("p",[a("strong",[t._v("堆")]),t._v("是另一个存储数据的空间，JS 在其中存储对象和函数"),a("br"),a("br"),t._v("\n与堆栈不同，JS 引擎不会为这些对象分配固定数量的内存，而根据需要分配空间。这种分配内存的方式也称为"),a("strong",[t._v("动态内存分配")]),t._v(" "),a("br"),a("br"),t._v("\n下面将对这两个存储的特性进行比较：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("堆栈")]),t._v(" "),a("th",[t._v("堆")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("存放基本类型和引用")]),t._v(" "),a("td",[t._v("对象和函数")])]),t._v(" "),a("tr",[a("td",[t._v("大小在编译时已知")]),t._v(" "),a("td",[t._v("在运行时才知道大小")])]),t._v(" "),a("tr",[a("td",[t._v("分配固定数量的内存")]),t._v(" "),a("td",[t._v("没怎么限制")])])])]),t._v(" "),a("h3",{attrs:{id:"事例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事例"}},[t._v("#")]),t._v(" 事例")]),t._v(" "),a("p",[t._v("来几个事例，加强一下映像。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("JS 在堆中为这个对象分配内容。实际值仍然是原始值，这就是它们存储在堆栈中的原因。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hobbies "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hiking'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reading'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("数组也是对象，这就是为什么它们存储在堆中的原因。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为字符串分配内存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为字分配内存")]),t._v("\n\nname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John Doe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为新字符串分配内存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为新字符串分配内存")]),t._v("\n")])])]),a("p",[t._v("始值是不可变的，所以 JS 不会更改原始值，而是创建一个新值。")]),t._v(" "),a("h2",{attrs:{id:"javascript-中的引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的引用"}},[t._v("#")]),t._v(" JavaScript 中的引用")]),t._v(" "),a("p",[t._v("所有变量首先指向堆栈。如果是非原始值，则堆栈包含对堆中对象的引用。"),a("br"),a("br"),t._v("\n堆的内存没有按特定的方式排序，所以我们需要在堆栈中保留对其的引用。我们可以将引用视为地址，并将堆中的对象视为这些地址所属的房屋。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("请记住，JS 将对象和函数存储在堆中。基本类型和引用存储在堆栈中。")])]),t._v(" "),a("h2",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[t._v("现在，我们知道 JS 如何为各种对象分配内存，但是在内存生命周期，还有最后一步："),a("strong",[t._v("释放内存")]),t._v("。"),a("br"),a("br"),t._v("\n就像内存分配一样，JavaScript引擎也为我们处理这一步。更具体地说，"),a("strong",[t._v("垃圾收集器")]),t._v("负责此工作。"),a("br"),a("br"),t._v("\n一旦 JS 引擎识别变量或函数不在被需要时，它就会释放它所占用的内存。"),a("br"),a("br"),t._v("\n这样做的主要问题是，是否仍然需要一些内存是一个无法确定的问题，这意味着不可能有一种算法能够在不再需要那一刻立即收集不再需要的所有内存。"),a("br"),a("br"),t._v("\n一些算法可以很好地解决这个问题，我将在本节中讨论最常用的方法："),a("strong",[t._v("引用计数")]),t._v("和"),a("strong",[t._v("标记清除")]),t._v("算法。")]),t._v(" "),a("h3",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("当声明了一个变量并将一个引用类型值赋值该变量时，则这个值的引用次数就是 1 ，如果同一个值又被赋给另外一个变量，则该值得引用次数加 1 。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1 。"),a("br"),a("br"),t._v("\n当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。")]),t._v(" "),a("h3",{attrs:{id:"周期数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#周期数"}},[t._v("#")]),t._v(" 周期数")]),t._v(" "),a("p",[a("strong",[t._v("引用计数")]),t._v("算法的问题在于它不考虑循环引用。当一个或多个对象互相引用但无法再通过代码访问它们时，就会发生这种情况。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dad "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Johnson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dad "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("son "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nson "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndad "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("由于父对象相互引用，因此该算法不会释放分配的内存，我们再也无法访问这两个对象。"),a("br"),a("br"),t._v("\n它们设置为 null 不会使引用计数算法识别出它们不再被使用，因为它们都有传入的引用。")]),t._v(" "),a("h3",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),a("p",[t._v("标记清除算法对循环依赖性有解决方案。它检测到是否可以从 root 对象访问它们，而不是简单地计算对给定对象的引用。"),a("br"),a("br"),t._v("\n浏览器的 root 是 window 对象，而Nodejs的 root 是 global。")]),t._v(" "),a("p",[t._v("该算法将无法访问的对象标记为垃圾，然后对其进行扫描（收集）。根对象将永远不会被收集。"),a("br"),a("br")]),t._v(" "),a("p",[t._v("这样，循环依赖关系就不再是问题了。在前面的示例中，dad 对象 和 son 对象都不能从根访问。因此，它们都将被标记为垃圾并被收集。"),a("br"),a("br"),t._v("\n自2012年以来，该算法已在所有现代浏览器中实现，仅对性能和实现进行了改进，算法的核心思想还是一样的。")]),t._v(" "),a("h3",{attrs:{id:"内存使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存使用"}},[t._v("#")]),t._v(" 内存使用")]),t._v(" "),a("p",[t._v("由于算法无法确切知道什么时候不再需要内存，JS 应用程序可能会使用比实际需要更多的内存。"),a("br"),a("br"),t._v("\n即时将对象标记为垃圾，也要由垃圾收集器来决定何时以及是否将手机分配的内存。"),a("br"),a("br"),t._v("\n如果你希望应用程序尽可能提高内存效率，那么最好使用低级语言。但是请记住，这需要权衡取舍。")]),t._v(" "),a("h3",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),a("p",[t._v("收集垃圾的算法通常会定期运行以清理未使用的对象。"),a("br"),a("br"),t._v("\n问题是我们开发人员不知道何时会回收。收集大量垃圾或频繁收集垃圾可能会影响性能。然而，用户或开发人员通常不会注意这种影响。")]),t._v(" "),a("h2",{attrs:{id:"内存泄露"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露"}},[t._v("#")]),t._v(" 内存泄露")]),t._v(" "),a("p",[t._v("在全局变量中存储数据，最常见内存问题就是"),a("strong",[t._v("内存泄露")]),t._v("。"),a("br"),a("br"),t._v("\n在浏览器的 JS 中，如果省略 var , const 或 let，则变量会被加到 window 对象中。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("users "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在严格模式下可以避免这种情况。"),a("br"),a("br"),t._v("\n除了意外地将变量添加到根目录之外，在许多情况下，我们需要这种来使用全局变量，但是一旦不需要时，要记住手动的把它释放了。"),a("br"),a("br"),t._v("\n释放它很简单，把 null 给它就行了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("users "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"被遗忘的计时器和回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被遗忘的计时器和回调"}},[t._v("#")]),t._v(" 被遗忘的计时器和回调")]),t._v(" "),a("p",[t._v("忘记计时器和回调可以使我们的应用程序的内存使用量增加。特别是在单页应用程序（SPA）中，在动态添加事件侦听器和回调时必须小心。")]),t._v(" "),a("h4",{attrs:{id:"被遗忘的计时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被遗忘的计时器"}},[t._v("#")]),t._v(" 被遗忘的计时器")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" intervalId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是使用的所有东西都无法收集直到清除 `setInterval`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面的代码每2秒运行一次函数。如果我们的项目中有这样的代码，很有可能不需要一直运行它。"),a("br"),a("br"),t._v("\n只要 "),a("strong",[t._v("setInterval")]),t._v(" 没有被取消，则其中的引用对象就不会被垃圾回收。\n确保在不再需要时清除它。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intervalId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"被遗忘的回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被遗忘的回调"}},[t._v("#")]),t._v(" 被遗忘的回调")]),t._v(" "),a("p",[t._v("假设我们向按钮添加了 "),a("strong",[t._v("onclick")]),t._v(" 侦听器，之后该按钮将被删除。旧的浏览器无法收集侦听器，但是如今，这不再是问题。"),a("br"),a("br"),t._v("\n不过，当我们不再需要事件侦听器时，删除他们仍然是一个好的做法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onClick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("onClick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("onClick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"脱离-dom-引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脱离-dom-引用"}},[t._v("#")]),t._v(" 脱离 DOM 引用")]),t._v(" "),a("p",[t._v("内存泄露与前面的内存泄露类似：它发生在用 JS 存储 "),a("strong",[t._v("DOM")]),t._v(" 元素时。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'botton'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAllElements")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("删除这些元素时，我们还需要确保耶从数组中删除该元素。否则，将无法收集这些 "),a("strong",[t._v("DOM")]),t._v(" 元素。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'botton'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAllElements")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于每个 "),a("strong",[t._v("DOM")]),t._v(" 也保留对其父节点的引用，因此可以防止垃圾收集器收集元素的父元素和子元素。")])])}),[],!1,null,null,null);s.default=r.exports}}]);