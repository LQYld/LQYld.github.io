(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{400:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"node基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node基本概念"}},[t._v("#")]),t._v(" Node基本概念")]),t._v(" "),e("h2",{attrs:{id:"一-node是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-node是什么"}},[t._v("#")]),t._v(" 一.Node是什么?")]),t._v(" "),e("p",[t._v("Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境（runtime）,Node不是一门语言是让js运行在后端的运行时，并且不包括javascript全集，\n因为在服务端中不包括DOM和BOM，Node也提供了一些新的模块例如http,fs模块等。Node.js 使用了事件驱动、非阻塞式 I/O 模型，使其轻量又高效并且 Node.js 的包管理器 npm，\n是全球最大的开源库生态系统。事件驱动与非阻塞IO后面我们会--介绍。到此我们已经对node有了简单的概念。")]),t._v(" "),e("h2",{attrs:{id:"二-node解决了哪些问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-node解决了哪些问题"}},[t._v("#")]),t._v(" 二.Node解决了哪些问题?")]),t._v(" "),e("p",[t._v("Node 在处理高并发，I/O密集场景有明显的性能优势"),e("br")]),t._v(" "),e("ul",[e("li",[t._v("高并发，是指在同一时间并发访问服务器")]),t._v(" "),e("li",[t._v("I/O密集指的是文件操作、网络操作、数据库，相对的有CPU密集，CPU密集指的是逻辑处理运算、压缩、解压、加密、解密")])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("Web主要场景就是接收客户端的请求读取静态资源和渲染界面,所以Node非常适合Web应用的开发。")])]),t._v(" "),e("h2",{attrs:{id:"三-js单线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-js单线程"}},[t._v("#")]),t._v(" 三.JS单线程")]),t._v(" "),e("p",[t._v("javascript 在最初设计时设计成了单线程，为什么不是多线程呢？如果多个线程同时操作DOM那岂不会很混乱？这里所谓的单线程指的是主线程时单线程的，所以在Node中主线程依旧是单线程的。")]),t._v(" "),e("ul",[e("li",[t._v("单线程特点是节约了内存，并且不需要在切换执行上下问")]),t._v(" "),e("li",[t._v("而且单线程不需要管锁的问题")])]),t._v(" "),e("h2",{attrs:{id:"五-node中的event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-node中的event-loop"}},[t._v("#")]),t._v(" 五.Node中的Event Loop")]),t._v(" "),e("ul",[e("li",[t._v("1.我们写的js代码会交给v8引擎进行处理")]),t._v(" "),e("li",[t._v("2.代码中可能会调用nodeApi,node会交给libuv库处理")]),t._v(" "),e("li",[t._v("3.libuv通过阻塞i/o和多线程实现了异步io")]),t._v(" "),e("li",[t._v("4.通过事件驱动的方式，将结果放到事件队列中，最终交给我们的应用")])]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("    本阶段执行已经被 setTimeout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 和 setInterval"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 的调度回调函数。\n   ┌───────────────────────────┐\n┌─"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("│           timers          │ \n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   执行延迟到下一个循环迭代的 I/O 回调。\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   仅系统内部使用。\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  检索新的I/O事件"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("执行与 I/O相关的回调  ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  setImmediate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 回调函数在这里执行。  └───────────────┘\n│  ┌─────────────┴─────────────┐      \n│  │           check           │\n│  └─────────────┬─────────────┘\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  一些关闭的回调函数\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("这里每一个阶段都对应一个事件队列,当event loop执行到某个阶段时会将当前阶段对应的队列依次执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段")])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("process.nextTick() 从技术上讲不是事件循环的一部分.")])]),t._v(" "),e("h2",{attrs:{id:"六-node中全局对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-node中全局对象"}},[t._v("#")]),t._v(" 六.Node中全局对象")]),t._v(" "),e("ul",[e("li",[t._v("Buffer")]),t._v(" "),e("li",[t._v("process")]),t._v(" "),e("li",[t._v("setInterval,setTimeout,setImmediate")]),t._v(" "),e("li",[t._v("console")]),t._v(" "),e("li",[t._v("queueMicrotask")])]),t._v(" "),e("h2",{attrs:{id:"七-node中的模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-node中的模块"}},[t._v("#")]),t._v(" 七.node中的模块")]),t._v(" "),e("ul",[e("li",[t._v("__dirname")]),t._v(" "),e("li",[t._v("__filename")]),t._v(" "),e("li",[t._v("exports")]),t._v(" "),e("li",[t._v("module")]),t._v(" "),e("li",[t._v("require()")])])])}),[],!1,null,null,null);s.default=n.exports}}]);